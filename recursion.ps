%!PS-Adobe-3.0
%%Title: (A recursion warning sign)
%%Creator: (Marek Kubica <marek@xivilization.net>)
%%EndComments

% foreground color
/Fgcolor { 0 0 0 } def
% background color
/Bgcolor { 1 1 0 } def
/Radius 200 def
/Linewidth 30 def
/Roundjoins 1 def

% switch the linewidth and line joinging styles
Linewidth setlinewidth
Roundjoins setlinejoin

% (radius angle) -- (x y)
/anglecoords
 { %def
	% put args in an array
	2 array astore
	% duplicate array
	dup
	% unpack the topmost one
	aload pop
	% calculate x
	cos mul
	% the other array
	exch
	% unpack
	aload pop
	% calculate y
	sin mul
	% done
 } def

% draws the background of the triangle sign
% --
/drawbg
  { % def
	Bgcolor setrgbcolor

	% move line to all three edges of the triangle
	Radius 90 anglecoords moveto
	Radius 210 anglecoords lineto
	Radius 330 anglecoords lineto
	% join the beginning and the end of the path together
	closepath
	% both fill and stroke
	gsave
		fill
	grestore
	stroke
  } def

% draws the foreground (just the lines) of the triangle
% sign
% --
/drawfg
  { % def
	/Subradius Radius 20 sub def
	Fgcolor setrgbcolor

	% construct the foreground triangle
	Subradius 90 anglecoords moveto
	Subradius 210 anglecoords lineto
	Subradius 330 anglecoords lineto
	closepath
	stroke
  } def

% draws the text unter the sign
% --
/drawtext
  { % def
	% get a bold, sans-serif font
	/Helvetica-Bold findfont 19 scalefont setfont
	% starting values gathered via trying out
	-105 -64 moveto
	(RECURSION WARNING) show
  } def

% draws the inner sign: foreground lines and the text
% --
/innersign
  { % def
	drawfg
	drawtext
  } def

% draws the complete sign with all background and the inner sign
% --
/fullsign
  { % def
	drawbg
	innersign
  } def

% draws a number of subsign, recursively (only the inner sign parts, not
% the complete sign with all background)
% number --
/subsign
  { % def
	% duplicate the counter and check whether it is 0
	dup 0 eq
	{ %iftrue
		% recursion end: delete the counter which is 0
		pop
	}
	{ %iffalse
		% change graphics context: move the next triangle a bit
		% up and scale it a bit down
		0 17 translate
		0.55 0.55 scale
		% draw the next triangle
		innersign

		% decrease the recursion counter
		1 sub
		% recursievely call
		subsign
	}
	ifelse
  } def

% draws the outer sign, and then a number of inner circles
% number --
/sign
  { % def
	% first draw the complete sign, together with the background
	fullsign
	% draw a number of smaller, recursive signs
	1 sub
	subsign
  } def

% center the triangle at 300, 500
300 500 translate
% draw 
7 sign
