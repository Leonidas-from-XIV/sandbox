#!/usr/bin/env ruby
# Sidebarize is a quite simple converter, like a lot others.
# But in one way Sidebarize is special: it converts
# feeds into HTML-pages suitable for sidebars in Gecko-browsers.

# import support for all kinds of feeds
require 'rss/0.9'
require 'rss/1.0'
require 'rss/2.0'
# import support for encodings
require 'iconv'
# import support for CGI
require 'cgi'
# import support for getting files from URLs
require 'net/http'
require 'uri'

Version = '0.0.7'

class FeedConverter
    def initialize
        @xml_source = ''
        @feed_data = []
        @feed_version = ''
        @feed_description = ''
    end
    
    def from_file(filename)
        f = File::open(filename)
        @xml_source = f.read
        f.close
    end
    
    def from_url(url)
        @xml_source = Net::HTTP.get(URI.parse(url))
    end
    
    def parse
        feed = RSS::Parser.parse(@xml_source)
        @feed_description = feed.channel.description
        @feed_name = feed.channel.title
        
    
        feed.items.each do |item|
            item_data = {}
            item_data['title'] = item.title
            item_data['link'] = item.link
            @feed_data << item_data
        end
    end
    
    # Output HTML from the internal data structure
    def to_html
        # header
        print %q(<!DOCTYPE html PUBLIC 
	"-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>)
        print "#{convert_entity(@feed_name)} Sidebar"
        puts %q(</title>
        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
        <link rel="stylesheet" type="text/css" href="sidebarize.css" />
    </head>

    <body>)
        puts "<p>#{convert_entity(@feed_description)}</p>"
    
        @feed_data.each do |item|
            print '<div>
            <img src="arrow.png" width="6" height="11" />
            <a href="'
            print item['link']
            print '">'
            print convert_entity(item['title'])
            print '</a>
        </div>'
        end
    
        # footer
        print %q(        <p>
            <img src="fourpiece32.png" width="32" height="32" class="logo" />
            generated by Sidebarize )
        print Version
        puts %q(</p>
    </body>
</html>)
    end
end

# Converts entities
def convert_entity(text)
    text = Iconv.new('iso-8859-15', 'utf-8').iconv(text) 
    
    feed = text.inspect[1...-1]

    feed.gsub!(/\\([0-7]+)|(.)/m) do
        if $2
            $&
        else
            '&#%s;' % $1.to_i(8).to_s(10)
        end
    end
    
    feed.gsub!('\"', '&quot;')

    return feed
end

# Starter
def main
    fc = FeedConverter.new
    cgi = CGI.new
    if cgi.has_key? 'uri'
        fc.from_url(cgi['uri'])
        fc.parse
        puts 'Content-Type: text/html'
        puts
        fc.to_html
    else
        puts 'Content-Type: text/plain'
        puts
        puts 'You must specify uri=http://your.url/feed.xml'
    end
end

main if __FILE__ == $0