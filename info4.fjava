/* straightforward, sums items */
int sumSeq(Seq<Integer> s) {
	if (isEmpty(rest(s))) return first(s);
	else {
		return first(s) + sumSeq(rest(s));
	}
}

/* alternating sequence sum */
int altSumSeq(Seq<Integer> s) {
	// the first item is positive, we start with 1
	return altSumSeq_(s, 1);
}

/* helper that actually calculates the sum */
int altSumSeq_(Seq<Integer> s, int factor) {
	// if it is the last element, return it
	if (isEmpty(rest(s))) return first(s) * factor;
	else {
		// recurse by changing the sign and add to this sum
		return factor * first(s) + altSumSeq_(rest(s), -factor);
	}
}

/* the power of some number */
int pow(int x, int y) {
	if (y == 0) return 1;
	else return x * pow(x, y - 1);
}

/* binary to integer, calling recursively, and decreasing power */
int bin2int_(Seq<Boolean> seq, int power) {
	if (isEmpty(rest(seq))) {
		if (first(seq)) return 1;
		else return 0;
	}
	else {
		final boolean var = first(seq);
		if (var) {
			return pow(2, power) + bin2int_(rest(seq), power - 1);
		}
		else {
			return bin2int_(rest(seq), power - 1);
		}
	}
}

/* length of sequence */
int length(Seq<? extends Object> seq) {
	if (isEmpty(seq)) return 0;
	else return 1 + length(rest(seq));
}

/* binary to integer */
int bin2int(Seq<Boolean> seq) {
	// get the maximal power to which to raise the first number
	return bin2int_(seq, length(seq) - 1);
}

Seq<Boolean> int2bin(int i) {
	if (i / 2 == 0) {
		if (i % 2 == 1) return cons(true);
		else return cons(false);
	}
	else {
		final int div = i / 2;
		final int mod = i % 2;
		// append a true or false, depending on the modulo
		return concat(int2bin(div), cons(mod == 1));
	}
}

/* prepends the sequence with 'false', used for padding */
Seq<Boolean> prepend(Seq<Boolean> seq, int times) {
	if (times == 0) return seq;
	else {
		return concat(cons(false), prepend(seq, times-1));
	}
}

/* recursive addition of binary numbers, takes an 'overflow' argument
 * to add the overflow bit of the previous calculation */
Seq<Boolean> binadd_(Seq<Boolean> a, Seq<Boolean> b, boolean overflow) {
	final boolean afirst = first(a);
	final boolean bfirst = first(b);
	// adding the values directly together
	final boolean result1 = afirst ^ bfirst;
	// the number bit
	final boolean finalresult = result1 ^ overflow;
	// set if at least two of afirst bfirst and overflow are set
	final boolean finaloverflow = (afirst && bfirst) || ((afirst || bfirst) && overflow);

	if (isEmpty(rest(a))) {
		if (finaloverflow) {
			return cons(finalresult, finaloverflow);
		}
		else {
			return cons(finalresult);
		}
	}
	else {
		return concat(cons(finalresult), binadd_(rest(a), rest(b), finaloverflow));
	}
}

/* helper function to reverse contents of the sequence */
Seq<Boolean> reverse(Seq<Boolean> seq) {
	if (isEmpty(rest(seq))) return seq;
	else return concat(reverse(rest(seq)), cons(first(seq)));
}

/* binary addition. reverses the sequences for calculating so that the overflow bit
 * can go from left to right */
Seq<Boolean> binadd(Seq<Boolean> a, Seq<Boolean> b) {
	final int alen = length(a);
	final int blen = length(b);
	// pad the sequences accordingly, so that they are of the same length
	if (alen < blen) {
		return reverse(binadd_(reverse(prepend(a, blen-alen)), reverse(b), false));
	}
	else if (blen < alen) {
		return reverse(binadd_(reverse(a), reverse(prepend(b, alen-blen)), false));
	}
	else {
		return reverse(binadd_(reverse(a), reverse(b), false));
	}
}
