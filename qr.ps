%!PS-Adobe-3.0
%%Title: (QR code printer)
%%Creator: (Marek Kubica <marek@xivilization.net>)
%%EndComments

% draws a single block
% (x y --)
/drawblock {
} def

(

aaa
bbb
)

% ( arr -- strippedarr )
/lstripone {
	% get the length of arr
	dup length
	% arr len
	exch
	% len arr
	dup startswithnewline
	% len arr 0th-was-\n
	{ 1 } { 0 } ifelse
	% len arr startfrom
	3 -1 roll
	% arr startfrom len
	1 sub
	% arr startfrom count
	getinterval
} def

% (seq -- seq)
/lstrip {
	{
	      dup startswithnewline
              % seq bool
	      not { exit } if
	      % seq
              lstripone
	} loop
} def

% (seq -- reversedseq)
/reverse { %def
	% begin array construction
	[
		% get original sequence inside array construction
		exch
		% unpack array on stack
		{} forall
		% roll until we reversed everything
		2 1 counttomark 2 sub { %for
			-1 roll
		} for
	% re-create reversed array
	]
} def

% ( seq -- bool )
/startswithnewline {
	0 get
	10 eq
} def

% draws an QR code
% (qr --)
/drawqr {
	% remove \n at beginning and end, first
	{
		% do something with the numbers
		% when 'B': switch color to black and draw rect
		% when ' ': switch color to white and draw rect
		% when '\n': linebreak
	}
	forall
} def

% demo QR code
(
BBBBBBB  BBB    B  BB BBBBBBB
B     B  BBBBBB B   B B     B
B BBB B     B B  B BB B BBB B
B BBB B B    BBBBBB   B BBB B
B BBB B   BB   B  B   B BBB B
B     B BBB B B BBB   B     B
BBBBBBB B B B B B B B BBBBBBB
        B   BB B B BB        
 BB   B  B B BB  B BB BB B   
B      B BBB B BBB  BBBB BBBB
B BBBBBBB B B B BB  B   B   B
 BBB B BBBB     B  BBBBB B   
     BB   B B        BBB B B 
B BBBB BBB B  BB   BB B  B  B
 B BBBBB  BB     BBB  BB BB B
B   B    BB  BB B B     BB B 
BB    BBBBB B BBBBB  BBB   B 
B  B B  BB  BBB BBB    B BB B
   B  B  B B    BBBB   B B  B
BB       BBB   BB B  BBBB  BB
     BBB    BBB    BBBBBBB  B
        BBB  BBBBBB B   BB  B
BBBBBBB   B  B B    B B BBB B
B     B    BBB   B BB   BB   
B BBB B  BB    B B BBBBBB   B
B BBB B   B B    B   B BBBBB 
B BBB B B BB   B  BB   BBB BB
B     B B BB BB      BB  B   
BBBBBBB  B BB BBB    B BBB  B
)
